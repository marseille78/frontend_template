Об  авторе

НИКОЛАС  ЗАКАС  занимается  разработкой  веб-приложений более десяти лет. Он принимал участие в создании корпоративных интернет-приложений для ряда крупнейших компаний  в  мире и  разрабатывал  такие  известные потребительские веб-сайты,  как  Му Yahoo!  и  домашняя  страница Yahoo!. В  качестве  архитектора уровня  представлений  в  Yahoo!  Николас  руководил  разработкой  клиентских компонентов популярнейших сайтов в мире. Он регулярно выступает на корпоративных собраниях, конференциях и  неформальных мероприятиях, посвященных новым технологиям  и  лучшим методикам разработки  клиентских компонентов веб-приложений. Является автором нескольких книг, включая Professional  Ajax  and High Perfonnance JavaScnpt,  и ведет  блог на сайте http://www.nczonline.net/.  В  Twitter автора можно найти под ником @slicknet.










О  научном  редакторе 

Джон Пелоквин (John Peloquin) занимается разработкой клиентских компонентов веб-приложений и за  десять  лет работы с JavaScript поучаствовал в создании решений всех размеров. Он получил диплом бакалавра по математике в  Калифорнийском университете  (Беркли) и в  настоящее время занимает должность ведущего разработчика в молодой компании, где использует новейшие технологии программирования клиентских  систем.  Джон был  научным редактором  книги JаvаSсnрt 24-HourTrainer  (Wiley, 2010), которую написал Джереми Макпик (Jeremy McPeak). Если Джон не программирует и  не ищет ошибки  в  книгах,  его  можно застать за занятиями математикой, философией или жонглированием.










Предисловие

Оглядываясь  назад,  я  могу  назвать много технологий  и  людей,  которые оказали важное  влияние на мою профессиональную жизнь и  мои решения. Тем  не менее если бы мне нужно было выбрать одну технологию, повлиявшую на меня сильнее остальных, я бы выбрал JаvаSсгiрt. Не буду врать - я не всегда верил в JavaScгipt. Как  и многие разработчики, поначалу  я  думал, что это  игрушечный  язык, пригодный разве что для  анимации  банеров  и  добавления  некоторых интересных эффектов на страницы.  Я  разрабатывал  серверные  компоненты  приложений,  и  было жаль тратить время на такую ерунду.  Но  затем появился Ajax.

Никогда не забуду шумиху, которая поднялась вокруг  этой технологии. Все только и говорили о том,  какой  это прорыв. Решив разобраться что к чему , я был ошеломлен, когда по мере чтения понял, что игрушечный язык,  который я  пренебрежительно игнорировал, превратился в технологию, приковавшую к себе внимание всех профессиональных веб-разработчиков. Мое  отношение  к веб-программированию  тут  же изменилось, и по мере изучения Ajax  я понял, что  JavaScгipt - невероятно мощный и эффективный  язык, который  непременно нужно попробовать в деле. Я с головой погрузился в него, чтобы понять все его нюансы, присоединился к разработчикам jQueгy и сосредоточился на  разработке клиентских компонентов веб-приложений. Жизнь заиграла для меня новыми красками.

Чем  глубже я погружался  в JavaScгipt, тем больше встречал  разработчиков, которых по сей  день считаю  "звездами" и  учителями.  Николас  Закас  - один  из  них. Помню, как много знаний я почерпнул из второго издания, несмотря на весь свой многолетний  опыт.  Книга  воспринималась как искренний глубокомысленный рассказ  настоящего эксперта,  способного  объяснить материал  людям  с  самыми разными уровнями  подготовки.  Это по-настоящему выделяло  ее  на фоне других технических книг.  Многие авторы вываливают на читателя вагон технических деталей, чтобы впечатлить его своими знаниями, но эта книга была совсем не такой. Она захватила мои мысли на многие недели, и я  стал  рекомендовать ее всем, кто желал по-настоящему понять JаvаSсгiрt. Я хотел,  чтобы все почувствовали то, что чувствовал я, и  поняли, насколько ценен такой источ ник знаний. 

А затем  на конференции  по jQueгy  мне посчастливилось встретиться  с  автором "вживую". Один из лучших JаvаSсгiрt-программистов, работающий с важнейшими веб-активами  в  мире (Yahoo!), оказался  еще и  одним из самых приятных людей, которых я когда-либо встречал.  Признаю,  что  я даже испытывал  легкое благоговение перед ним, но оказалось, что он  скромный  и практичный человек, просто желающий помочь разработчикам стать лучше. В результате эта  книга изменила  мое мышление о JavaScript, а знакомство с ее автором вызвало у меня желание поработать вместе и  узнать его лучше. 

Когда он  попросил  меня написать  это  предисловие, я  был  весьма польщен. Для меня  это как предварять выступление гуру на конференции, и я  на самом  деле не могу  найти  слов,  чтобы  выразить  свое  восхищение  Николасом.  Однако еще  важнее для  меня  убедить читателей в  важности этой книги. Я  прочитал  много книг о JavaScript  и могу назвать несколько очень  достойных  работ, но эта стоит особняком в  том смысле, что содержит все, что необходимо, чтобы  стать профессиональным компетентным  JаvаSсriрt-разработчиком. 

Постепенный и продуманный  переход от  основ,  таких  как  выражения и объявления переменных, к более сложным темам вроде замыканий и объектно-ориентированных приемов разработки  - вот что отличает это руководство от других  книг,  которые либо  грешат чрезмерной  простотой,  либо, наоборот, написаны так,  как будто читатели с помощью  JavaScript собираются программировать системы наведения ядерных боеголовок.  Эта  книга  поможет  вам  писать  код,  которым вы сможете  гордиться, и  создавать сайты, делающие жизнь пользователей комфортнее и радостнее. 

Рей Банго 

Старший популяризатор технологий корпорации Microsoft 

Рабочая гpyппa jQuery










Введение

По мнению некоторых аналитиков, JаvаSсriрt является в настоящее время самым 
популярным языком программирования, что очень похоже на правду, если  учесть, 
что  на  нем написано  множество сложных  веб-приложений, используемых по всему 
миру для бизнес -аналитики, закупок, управления процессами и т. д. 
JavaScript  имеет  поверхностное  сходство  с Java  - объектно- ориентированным 
языком программирования, который приобрел  некоторую популярность  среди 
веб- разработчиков благодаря  встроенным апплетам .  И  все же несмотря  на то, 
что  синтаксис  и  методология  програм мирования на  JavaScript и Java  похожи, 
JavaScript  - это не упрощенная  версия  Java,  а  отдельный динамический язык, 
который  надежно  обосновался  в  веб- браузерах,  помогая  пользователям  взаимо­
действовать с  веб- сайтами и  веб-приложениями. 
Эта книга  полностью описывает эволюцию  JavaScript,  начиная с его реализаций 
в ранних браузерах Netscape и  заканч ивая  современными  возможностями, вклю­
чающими  поддержку технологий  DOM  и  Aj ax.  Вы узнаете, как расширить язык 
в  соответст вии  с  конкретными требованиями  и  как реализ овать  эффективное 
взаимодействие  кл иента с  сервером без промежуточных компонентов, таких  как 
Jаvа-апплеты или скрытые фреймы. Используя полученные значения, вы сможете 
решать  бизнес-проблемы,  с  которыми  каждый день сталкиваются  многие веб­
разработчики по всему миру.










Цел е ва я  а уд ито р и я 
Эта книга ориентирована на три  группы читателей: 
О  профессиональные разработчики, имеющие опыт объектно-ориентированного 
программирования и желающие изучить JаvаSсriрt в контексте традиционных 
объектно -ориентированных языков, таких как jаvа и  С++; 
О  разработчики веб-приложений, которым нужно сделать свои веб- сайты  и  веб­
приложения более  удобными в использовании; 
О  начинающие разработчики нa javaScript, желающие  лучше  понять этот  язык.

Кроме того,  книга может заинтересовать  вас,  если  вы  используете  какие-либо  из 
следующих технологи й: 
о  Java; 
о  РНР; 
о  ASP.NET; 
о  HTM L; 
о  CSS; 
о  XML. 
Эта книга не подойдет вам, если вы не владеете базовыми навыками программирова­
ния или всего лишь хотите добавить на веб- сайт простые средства взаимодействия 
с  пользователя ми.  Если  вы узнали  себя  в  этом  описании,  вам лучше обратиться 
к четвертому изданию книги BeginningjavaScript от Wrox (Wil ey,  2009).










Тем ы,  расс м ат р иваем ы е  в  книге 
Книга, которую  вы  держите в  руках,  объединяет введение в JavaScript для разра­
ботчиков и  описание более сложных и  полезных возможностей этого языка. 
Сначала мы рассмотрим историю и эволюцию  J  avaScript, после  чего подробно обсу­
дим компоненты языка, уделив особое внимание  стандартам, таким как EC MAScript 
и  Document Obje ct Model (DOM),  а также различиям JаvаSсriрt -реализаций в по­
пулярных веб- браузерах . 
Взяв эту информацию за  основу ,  далее мы рассмотрим базовые концепцииJаvаSсriрt, 
в том числе особенности объектно-ориентированного программирования с его по­
мощью, наследование и  использование его  в  HTML. Вслед за  подробным  обсуж­
дением обработки событий вы ознакомитесь с приемами распознавания браузеров 
и  новыми API, такими как HTMLS, Selectors и  File. 
Последняя часть книги посвящена более  сложным темам,  таким как  оптимизация 
быстродействия и использования памяти, наилуч шие методики работы и перспек­
тивные направления  развития  J avaScript.










Ст руктура  кн иги 
В  книге 25  гл ав. 
1.  Что тaкoeJavaScript? Эта  глава  содержит  общие сведения ojavaScript: вы узнаете, 
как появился этот язык, как он развивался и что он представляет собой  сегодня. 
Мы обсудим, кaк javaScript соотносится с ECMAScript, объектной моделью  доку­
мента (DOM)  и объектной моделью  браузера  (БОМ). Кроме того, вы ознакомитесь
с  соответствующими стандартами  от  Европейской ассоциации производителей 
вычислительной техн ики (ЕС МА) и  консорциума World Wide Web (WЗС). 
2.  JavaScript в  HTML. В  этой  главе  описано применение  JavaScript в  сочетании 
с HTML  для создания динамических веб-страниц. Также рассмотрены различные 
способы внедрения JavaScript- кoдa в  страни цу,  типы JаvаSсгiрt- контента и  их 
использование с элементом <scr ipt>. 
3.  Основы языка. В этой главе рассмотрены базовые концепции языка, в том числе 
его синтаксис и управляющие инструкци и. В ней указаны сходства и различия 
JavaScript  и  других  С-подобных  языков,  а  также  описано  приведение типов 
в связи со встроен ными операторами. 
4.  Переменные, область  видимости  и  память .  В  этой  главе  рассказано о  пере­
менных, которые вjavaScript являются слабо типизированными. Глава содер­
жит сведения  о  разл ичиях между примитивными и  ссылочными значениями 
и  контексте  выполнения  в  связи  с  переменными.  Вы также узнаете  о  том, как 
работает сборщик мусора и  как память возвращается среде, когда переменные 
покидают область видимости. 
5.  Ссылочные типы.  Эта гл ава посвящена встроенным  в JavaScript ссылочным 
типам, таким как Object  и  Array. Для каждого ссылочного типа, определенного 
в  ЕСМА-262, при ведены  как  теоретические  сведения,  так  и  подробности  его 
реализации в браузерах. 
6.  Объектно-ориентированное программирование. В этой главе  рассмотрены при­
емы объектно- ориентированного программирования на  J  avaScript.  Поскольку 
вj avaScript нет классов, мы обсудим несколько популярных методик  создания 
объектов и наследования .  Глава  также  содержит сведения о прототипах функций 
и их использовании в рамках объектно- ориентированного подхода. 
7.  Функции-выраж ения .  Функции-выражения  относятся  к  наиболее  мощным 
аспектам применения jаvаSсгiрt. В этой  гл аве описы ваются замыкания,  детали 
функционирования объекта  this,  паттерн Модуль и создан ие закрытых членов 
объектов. 
8.  Объектная модель браузера.  В этой главе описана  объектная модель браузера 
(БОМ), которая предоставляет объекты для  взаимодействия  с  браузером.  Вы 
ознакомитесь  со  всеми  БОМ -о бъектам и, включая  win dow, doc ument,  location, 
navigator и  scr een. 
9.  Распознавание клиента .  В  этой главе  рассмотрены способы распознавания 
клиентского браузера и  поддерживаемых им функциональных возможностей . 
Вы узнаете о распознавании возможностей, анализе строки пользовательского 
агента,  о  достоинствах и  недостатках  каждого  подхода  и  о  том,  какой  подход 
оптимален в той или иной ситуаци и. 
10.  Объектная модель документа .  В  этой  гл аве  описаны объекты ,  определенные 
в спецификации  DOM  Level  1.  После ознакомления с  XML в  контексте  DOM
вы сможете подробно изучить модель DO  М и предоставляемые ею возможности 
по манипулированию содержимым стран ицы. 
11.  Расширения DOM. Эта  глава  содержит сведения о  том, как  API и сами браузеры 
расширяют функционал  DOM. В число рассматриваемых тем входят Selectors, 
Element Traversal API  и расширения HTMLS. 
12.  DOM Level 2  и  3.  В  этой  гл аве,  основанной  на двух  предыдущих гл авах,  рас­
сказано о  том,  как спецификации DOM Level 2  и 3  расширяют DOM дополни­
тельными свойствами, методами  и  объектами.  Также  рассмотрены  проблемы 
совместимости Internet  Explorer и других браузеров. 
13 .  События .  Из этой главы вы узнаете о  природе  JavaScript-coбытий, их генери­
ровании, поддержке унаследованных возможностей и о том, как события  пере­
определены в  DOM. Помимо прочего,  в главе рассмотрены события устройств 
Wii и iP hone. 
14.  Работа с  формами.  В  этой главе рассказывается ,  как с  помощью JavaScript 
улучшить взаимодействие с  формами и  обойти ограничения браузера.  Особое 
внимание уделено работе с элементами форм, такими как  текстовые поля  и спи­
ски,  а также  проверке и обработке данных. 
15.  Рисование на холсте .  Эта гл ава  посвящена тегу <c anv as> и его использованию 
для ди намичного создания графики. Рассмотрены двухмерный контекст и кон­
текст WebGL  (трехмерный ),  что поможет вам приступить к созданию анимаций 
и  игр. 
16 .  HTML5 .  В этой  главе  представлены изменения JаvаSсriрt API в HTMLS. Глава 
включает сведения о передаче сообщений между документами, элементах <au dio> 
и  <video> из Drag- and- Drop API, а также  управлении состоянием журнала. 
17.  Обработка  ошибок и  отладка .  В  этой главе рассмотрены  способы  обработки 
ошибок вjavaScript- кoдe. Также описаны инструменты и  приемы отладки для 
каждого браузера и приведены рекомендации по упрощению процесса отладки. 
18.  XML вJavaScript.  В  этой  гл аве рассмотрены возможности JаvаSсriрt, исполь­
зуемые для чтения ХМ L-данных и  манипулирования ими.  Описаны различия 
возможностей и объектов в разных веб- браузерах и приведены советы по напи­
санию кроссбраузерного кода. Также в главе приведены сведения об использо­
вании  ХSLТ-преобразований для трансформации ХМ L-данных на клиентских 
системах. 
19.  ECМAScript  для  XML. Эта  глава  посвящена  расширению EC MAScript  для  XML 
(Е4Х), которое упрощает работу с  XML.  Также  в  ней описаны  преимущества 
Е4Х над манипулированием XML с  помощью DOM. 
20.  JSON. В этой гл аве представлен формат  JSON - альтернатива XML.  Описаны 
возможности си нтаксического анализа и сериализацииJSОN и приведены све­
дения  о  том,  как обеспечить безопасность при использовании  JSON.
21.  Ajax и Comet. В этой гл аве описаны популярные приемы работы с Aj ax, в том 
числе  использование  объекта XM LHtt pRequest  и  обмен  ресурсами  с  запросом 
происхожде ния  (C ORS). Также  рассмотрены  разл ичия реализаций  и  под­
держки  Aj ax в  браузерах и  при ведены рекомендации по использованию этой 
технологи и. 
22.  Более  сложные  приемы .  В  этой гл аве  описаны более  сложные  шаблоны 
JavaScript, такие как каррирование функций, частичное применение функций 
и  динамические  функции.  Кроме того,  в  главе  рассмотрены  пользователь­
ские события  и  создание  объектов, защищенных от  изменений, с  помощью 
EC MAScript 5. 
23.  Автономный режим и  клиентское хранилище .  В этой главе рассказано о  том, 
как  определить, что  приложение  работает  в  автономном  режиме,  и  описаны 
разл ичные  методики сохранения данных на клиентском  компьютере.  В  гл аве 
рассмотрены как традиционные файлы cookie, так и более новые возможности, 
такие как веб- хранилище и база данных Indexed DB. 
24.  Наилучшие методики. Эта глава  посвящена использованию jаvаSсriрt в корпора­
тивной среде. В ней описаны приемы обслуживания кода, в том числе методики 
кодирования,  форматирования кода и общие приемы программирования. Также 
приведены  советы  по оптимизации и  повышению быстродействия кода.  Нако­
нец,  рассмотрены  вопросы  развертывания  приложений, включая  реализацию 
процесса сборки. 
25.  Перспективные API. В этой главе представлены API, разрабатываемые  для рас­
ширения возможностей jаvаSсriрt в браузере. Несмотря на  то, что эти API пока 
реализованы не полностью, разработчики  браузеров  уже  начинают их  внедрение. 
Глава содержит сведения о Web Timing, Geolocation и  File API.










Ч то  н ужно для  эффект ив ной  ра бот ы 
..... 
с  кн игои 
Для выполнения примеров из  книги вам потребуется следующее: 
О  компьютер с операционной системой Windows ХР,  Windows 7  или Мае  OS Х; 
О  браузер Internet Exploгer 6 или более поздней версии, Firefox 2  или более позд-ней верс ии, Opera 9  или более поздней версии, Chrome либо Safari 2  или более 
поздней верс ии. 
Полный исходный код  примеров можно  загрузить с  сайта www.wrox.com.










Ч то  та ко е 
Ja va Sc ri pt? 
»  Обзор  истории JavaScri pt 
»  Общие  сведен ия  о  JavaScri pt 
»  JavaScri pt  ка к  реализация  ECMAScript 
»  Разные  верси и  JavaScri pt 
Когда в  1995 году появился jаvаSсriрt, его  основным назначением была проверка 
вводимых пользователем данных, что прежде выполняли такие серверные языки, 
как  Perl .  Раньше, чтобы определить, не пропущено  ли обязательное  поле  и допусти­
мы ли введенные в форму значения, требовалось обращение к серверу . В  Netscape 
Navigator с  помощью JavaScript была  предпринята  попытка изменить ситуацию. 
Во  времена коммутируемого доступа к Интернету возможность выполнять простую 
проверку на стороне клиента была воспринята с неподдельным энтузиазмом. Из-за 
низкой скорости подключения каждое обращение к серверу  становилось настоящим 
испытанием терпения пользователей. 
За прошедшее вpeмя javaScript стал важным компонентом каждого популярного 
веб- браузера.  Задачи JavaScript больше  не  ограничи ваются  простой проверкой 
данных:  теперь  он отвечает за взаимодействие почти  всех составля ющих окна 
браузера и его  кoнтeнтa. JavaScript стал полноценным  языком программирования, 
поддерживающим сложные вычисления и конструкции, включая замыкания, ано­
нимные (лямбда) функции и  даже  метапрограммирование.JаvаSсriрt превратился 
в такую  важную часть Сети, что его поддерживают даже альтернативные  браузеры, 
в том числе  браузеры  для  мобильных  устройств и пользователей с огран иченными 
возможностями. Даже Microsoft использует собственную реализацию JavaScript 
в  браузере  Internet  Explorer (с самых  ранних версий), несмотря  на наличие соб­
ственного клиентского  языка сценариев VBScript.

Предугадать пpeвpaщeниe javaScript из простого инструмента  для проверки вводи­
мых  данных в мощный  язык  программирования было невозможно. Он одновременно 
и  прост, и  сложен.  Изучить его си нтаксис можно за считанные минуты, но чтобы 
научиться применять его мастерски, требуются многие годы. Чтобы раскрыть пол­
ный потенциал JavaScript,  важно понимать его  природу,  историю и  ограничения.










Краткая  и стор ия  Ja va Scri pt 
По мере роста  популярности  Интернета обозначилась потребность в  языках  сце­
нариев для клиентской стороны. Хотя большинство пользователей подключались 
к Интернету  с  помощью модемов на скорости 28,8 Кбит/с, размер и сложность  веб­
страниц постоянно росли. Хуже того : даже для простой проверки форм требовалось 
несколько раз обращаться  к  серверу .  Только  представьте,  каково было заполнить 
форму, щелкнуть на  кнопке отправки, подождать 30 секунд, пока информация будет 
обработана,  и  получить сообщение о  том,  что  при  вводе данных было  пропущено 
обязател ьное поле.  В компании Netscape, бывшей тогда на рубеже инноваци й, на­
чали всерьез задумываться о  разработке языка сценариев для простой обработки 
данных на клиентской стороне. 
Брендан Айк (Brendan Eich), работавший  тогда  в  Netscape, в 1995 году начал создавать 
язык сценариев Mocha (позднее  переименованный в LiveScript) для браузера  Netscape 
Navigator 2. Предполагалось, что этот язык будет  использоваться и в браузере, и на 
сервере  (под названием LiveWire). Чтобы успеть завершить реализацию  LiveScript 
до выпуска  браузера, компания Netscape объединила  усилия с Sun Microsystems. Не­
задолго до выхода  Netscape Navigator 2 в  Netscape решили переименовать LiveScript 
вjavaScript, чтобы попытаться извлечь выгоду из популярности jаvа. 
J  avaScript  1. 0 оказался очень успешным, и Netscape выпустила его версию 1.1  в со­
ставе Netscape  Nav-igator 3. Популярность Интернета  стремительно росла,  и Netscape 
заслуженно занимала ведущее место на этом рынке. Тем временем в  Microsoft ре­
шили выделить больше ресурсов на  разработку  конкурирующего  браузера  Internet 
Explorer. Вскоре после выхода  Netscape  Navigator  3 корпорация Microsoft представи­
ла Internet Explorer 3 со своей реализацией jаvаSсriрt под названием J Sсriрt (чтобы 
избежать проблем с Netscape, связанных  лицензированием ). Вторжение Microsoft 
в  мир веб-браузеров в августе  1996 года оказалось началом конца  Netscape, но в то 
же время ускорило paзвитиe javaScript. 
То, что  J  avaScript был реализован в  Microsoft, означало, что появилось  две версии 
языкa: JavaScript (Netscape  Navigator) иJ Script (Internet Explorer). В отличие от С 
и многих  других  языков программирования, на  тот момент не было никаких cтaндap­
тoв J avaScript, определяющих его синтаксис и функциональность, и существование 
разных  версий языка только подчеркивало эту проблему.  Чтобы развеять опасения 
представителей отрасл и, было решено стандартизировать язык. 
В  1997 году  спецификация  J  avaScript  1.1 была принята Европейской ассоциацией 
произ водителей  выч ислительной  техн ики  (E uropean  Computer Manufacturers Association,  Ecma).  Был  организован  Технический  комитет  №  39  (T ec hnical 
Committee, ТС39 ),  перед  которым  стояла задача  .�стандартизировать синтаксис 
и  семантику  кросс- платформенного  независимого  языка  сценариев  общего  на­
значения»  ( www.ecma-i nternationa l.org/memento/ТC39 . htm  ).  Комитет ТС39 объединил 
программистов Netscape,  Sun,  Microsoft,  Borland, NOM BAS и  других  компаний, 
проявляющих интерес к будущему языков сценариев, и за несколько месяцев раз­
работал стандарт  ЕСМА-262, определивший новый язык  сценариев  с  названием 
ECMAScript. 
В следующем году  Международная организация по стандартизации (l nternational 
Organization  for  Standardization, ISO)  и Международная электротехническая комис­
сия  (l nternatio nal  Electrotec hnical  Commission, IEC) также приняли  ECMAScript 
в  качестве стандарта (ISO/IEC- 16262). С тех пор разработчики браузеров с  пере­
менным успехом  используют ECMAScript  как  основу  для реализации своих версий 
JavaScript.










Реал и за ци и 
JavaScri pt 
Хотя  названия JavaScript и  EC MAScript  часто  используются  как  синонимы, 
JavaScript  - это гораздо  больше, чем стандарт  ЕСМА-262. Полная  реализация 
JavaScript состоит из трех частей (рис.  1.1) : 
О  ядро  (EC MAScript); 
О  объектная модель документа (Document Object Model, DOM); 
О  объектная модель браузера (Browser Object Model, БОМ).










EC MAScri pt 
Сфера применения ECMAScript  - языка,  определенного  в  ЕС МА-262, - никак 
не связана с  веб- браузерами.  На самом  деле  в  нем даже  нет  методов  ввода и  вы­
вода данных.  Стандарт ЕСМА-262 определяет этот язык как  основу для создания 
полноценных языков сценариев.  Веб-браузеры  - это всего  лишь  одна из сред вы ­
полнения  (host environment), в  которых может работать ЕСМАSсriрt-реализация. 
Среда выполнения содержит  базовую ЕСМАSсriрt-реализацию и  ее расширения, разработанные  для взаимодействия с самой средой. Среди других сред выполнения 
можно отметить NodeJS (серверная jаvаSсriрt- платформа) и  Adobe Flash. 
Что же определяет  стандарт ЕСМА-262,  если в нем не фигурируют веб- браузеры? 
На базовом уровне он определяет следующие части языка: 
о  синтаксис; 
о  типы; 
о  инструкции; 
о  ключевые слова; 
о  зарезервированные слова; 
о  операторы; 
о  объекты. 
ECMAScript - это  просто  описание  языка, в котором  реализованы  все  аспекты спе­
цификации, aJavaScript - это реализация ECMAScript, но и Adobe ActionScript -тоже  реализация ECMAScript.










Реда кции ECMAScri pt 
Версии ECMAScript называют редакциями  (в  соответствии с  «номером�  ЕСМА-262, в  которой  написана конкретная  реализация ).  Последняя  (пятая)  редакция 
ЕСМА-262  вышла  в 2009 году.  Первая редакция ЕСМА-262 была  почти такой  же, как 
иjavaScript 1.1  от  Netscape, но из нее были удалены все ссылки на код, специфичный 
для браузеров.  Кроме того, в нее были  внесены небольшие изменения: ЕС МА-262 
должна  была  поддерживать стандарт Юникод (для использования других  языков) 
и  независимость  объектов  от  платформы  (в  Netscape JavaScript  1.1 встречались 
реализации объектов, например  Date,  зависящие от  платформы). Таким образом , 
реализацииjаvаSсriрt  1.1 и 1. 2  не  соответствовали  первой  редакции  ЕСМА-262. 
Вторая редакция ЕСМА-262 появилась из бюрократических  соображений. Стандарт 
был обновлен  для согласования с ISO  /IEC- 1 6262 и не содержал никаких изменений. 
В реализациях ECMAScript вторая редакция обычно не используется для оценки 
соответствия стандарту. 
Третья редакция  ЕСМА-262 стала первым реальным усовершенствованием стан­
дарта. В ней были обновлены спецификации обработки строк, определения  ошибок 
и  вывода чисел, добавлены регулярные выражения, некоторые управляющие ин­
струкции и  обработка исключений с помощью блоков try- catch. Также в нее были 
внесены небольшие изменения, позволяющие подготовить  стандарт  к интернацио­
н
ал изации. Именно с третьей редакции многие начали воспринимать ECMAScript 
как настоящий язык программирования. 
В четвертой редакции ЕСМА-262 язык был полностью переработан .  Привлечен­
ные  популярностью JavaScript в  Интер!fете,  разработч ики начали  адаптировать ECMAScript к растущим требованиям пользователей со  всех уголков мира. В свя­
зи с этим снова был созван комитет  ТС39, чтобы определиться с  будущим языка. 
Итоговая  спецификация описывала практически новый язык, созданный на базе 
третьей  редакции. Четвертая редакция включала  строго  типизированные  перемен­
ные, новые инструкции и структуры данных, полноценные классы, классическое 
наследование и новые способы взаимодействия с данными. 
В качестве альтернативного предложения подкомитет ТС39 разработал специфи­
кацию ECMAScript  3. 1, которая  не так  сильно  отл ичалась от третьей редакции. 
Она определяла дополнения к  EC MAScript, которые могли быть реализованы 
поверх существующих мoдyлeй javaScript.  В  итоге подкомитет ES3. 1  склонил на 
свою сторону  участников ТС39, и работа  над  четвертой редакцией ЕСМА-262  была 
приостановлена. 
Спецификация  ECMAScript 3. 1  стала пятой  редакцией  ЕСМА-262  и  была  офи­
циально опубликована 3  декабря  2009 года.  Она проясняет  неоднозначные места 
третьей  редакции и  вводит новую  функциональность, в  том числе  встроенный 
объект JSON для синтаксического анализа и сериализации  данных  в формате JSОN, 
методы наследования и расширенного определения свойств и новый  строгий режим, 
немного расширяющий возможности интерпретации и выполнения кода модулями 
ECMAScript.










Что  означает  « соответствие специфи ка ции ECMAScri pt»? 
ЕСМА-262 проверяет соответствие спецификации ECMAScript. Чтобы сч итаться 
ЕСМАSсriрt-реализацией, язык должен: 
О  поддерживать  все  «типы,  значения, объекты , свойства, функции, а также синтак-сис и семантику программ» (ЕС МА-262, р.  1) согласно их  описанию  в ЕСМА-262; 
О  поддерживать стандарт символов Юникода. 
Кроме того, реализация, соответствующая требованиям, может: 
О  содержать «дополнительные типы, значения, объекты, свойства  и функции»,  не 
указанные  в ЕС МА-262 (дополнительные  элементы описаны преимущественно 
как  новые  объекты  или новые свойства  объектов, которых нет в спецификации); 
О  поддерживать «синтаксис программ и регулярных  выражений»,  не  определенный 
в  ЕСМА-262 (то есть встроенные средства поддержки регулярных выражений 
можно изменять и расширять ). 
Данные критерии позволяют разработчикам создавать новые языки на  основе спе­
цификации ECM AScript, чем частично и  объясняется ее популярность.










Поддержка  ECMAScri pt  в  веб- б раузе рах 
Браузер Netscape Navigator 3 с поддержкойjаvаSсriрt 1.1 был выпущен в  1996  году. 
Эта  же спецификация JаvаSсriрt 1.1  затем была отправлена  в Ecma  как предложение нового  стандарта  ЕСМА-262.  Наблюдая  за  взрывным  ростом  популярности 
JavaScгipt, в Netscape с  радостью приступили к разработке версии 1. 2. Однако су­
ществовала проблема: в  Ecma еще не приняли предложение Netscape. 
Вскоре  после выпуска Netscape Navigator  3  корпорация  Microsoft  представила 
Internet Explorer 3. Эта версия  IE  включала язык jscript  1. 0, который  должен был 
стать аналогом J  avaScript  1.1,  однако из-за  недокументированных и  неточно вос­
произведенных функций оказался гораздо менее популярным. 
Браузер Netscape Navigator 4  с JavaScript  1. 2  вышел  в  19 97  году,  опередив при­
нятую  в  том же году первую редакцию  ЕСМА-262.  В  результате  оказалось, что 
JavaScript 1.2  не соответствует первой редакции EC MAScript,  которая должна  была 
базироваться нa JavaScript  1.1. 
Следующим обновлением JS cript  стал Jscript  3.0,  входящий в  состав  Internet 
Explorer 4  (версия  2.0  была в  составе Microsoft  Internet  Info rmation Server 3.0,  но 
никогда не включалась в браузеры). Microsoft выпустила пресс-релиз, расхвалива­
ющий jsсriрt 3.0  как первый по-настоящему совместимый с  Ecma язык сценариев. 
Окончательная  версия  ЕСМА-262  все  еще  не  была  принята,  так что Jscript  3.0 
постигла та же судьба, что и JavaScript  1. 2, - оказалось, что он не соответствует 
ECMAScript. 
Netscape Navigator 4.06 вышел с обновленной вepcиeй JavaScript 1. 3, которая была 
полностью совместимой  с  первой  редакцией  ЕС МА-262. Netscape добавила под­
держку стандарта  Юникод  и  сделала  все объекты  платформенно-независимыми, 
сохранив при этом возможности, представленные вJ avaScript  1. 2. 
Когда Netscape открыла исходн ый код  браузера в  рамках  проекта  Mozilla, пред­
полагалось, что JavaScript  1.4  войдет  в  Netscape Navigator 5, однако радикальное 
решение полностью переработать код  браузера  поставило крест на этих ожиданиях. 
JavaScript  1. 4  был  выпущен только  как серверный язык для  Netscape  Enterprise 
Server и  никогда не использовался в браузерах. 
К  2008 году  все пять  основных веб- браузеров  (I nternet  Explorer,  Firefox,  Safa ri, 
Chrome  и Opera) соответствовали  третьей редакции ЕС МА-262. Internet Explorer 8 
стал первым браузером , в котором была начата реализация пятой редакции ЕСМА-262, а в  Internet  Explorer 9  она была реализована полностью.  Вскоре  к  IE  присо­
единился  Firefox  4.  Сведения о  поддержке  ECM AScript в  наиболее  популярных 
веб-браузерах представлены в следу ющей таблице.

•  Неполная  реализац
ия.











Объектная  м одел ь документа 
Обьектная модель документа  (DOM) - это прикладной программный интерфейс 
(Application  Program ming Interfac e,  API) для  XML,  применение которого  было 
расширено  на HTML. В  DOM вся  страница представляется  как иерархия узлов. 
Каждый элемент HTML- или ХМ L-страницы является  узлом  определенного  типа, 
содержащим те или иные  данные. Рассмотрим следующую НТМ L-страницу: 
<html > 
<head> 
<title>S ample  Page</title> 
</h ead > 
<body > 
<p >Hello  World !< /p> 
</body> 
</html > 
Этот  код можно изобразить с  помощью DOM как  иерархию узлов (рис.  1. 2).

Рис.  1.2

Представляя документ в виде дерева,  DOM предоставляет разработчикам беспре­
цедентный контроль над его контентом и структурой. Используя DOM API,  можно 
с легкостью удалять узлы, добавлять, заменять и  изменять их.










Почему  необходима  модел ь  DOM 
Благодаря реализации  динамического HTML (Dynamic HTML, DHTML), в Internet 
Exploгer 4  и  Netscape Navigator 4  разработчики впервые смогли изменять  вид 
и  контент  веб-стран иц без  их перезагрузки.  Это стало  важным этапом развития 
веб-технологий, но возникла серьезная  проблема. Netscape и  Microsoft  выбрал и 
разные пути развития DHTML, что  завершило период, когда можно было писать 
НТМL-страницы, не задумываясь о веб-браузере. 
Стало ясно, что  для сохранения кросс- платформенности нужно что-то  делать, ведь 
из-за потенциальных разногласий  Netscape и  Microsoft Сеть могла разделиться на 
две части, каждая из которых была  бы  доступна  только  пользователям конкретного 
браузера. Комитет по стандартизации веб-коммуникаций консорциума World Wide 
Web (WЗС) приступил к работе над  DOM.










Уровни  DOM 
В  октябре  19 98 года спецификация  DOM  Level  1  получила статус  рекомендации 
WЗС. Она состояла  из  двух модулей: DOM Core (ядро DOM), определяющий спо­
соб представления структуры ХМ L-документа и обеспечивающий  удобный доступ 
к любым частям документа и выполнения операций над ними, и DOM HTML - рас­
ширение ядра  DOM, определя ющее объекты и методы, специфичные  для HTML.

Имейте  в виду, что модель DOM  не является специфичной для JavaScript и реал изова на 
во многих  других языках. Однако для веб-браузеров  DOM реализова на с использова­
нием  ECMAScript и  теперь является  значимой частью JavaScript. 
Специфи кация DOM Level  1  была предназначена для представл ения структуры 
документа, а DOM Level 2  охватывала  гораздо  больше областей. В оригинальную 
модель DOM  была добавлена  поддержка  мыши  и  событий  пользо вательс кого 
интерфейса (давно поддерживавшихся в  DHTML), диапазонов, способов обхода 
DОМ-элементов, а также поддержка каскадных табл иц стилей  (Cascading Style 
Sheets,  CSS) с  помощью  объектных  интерфе йсов.  Ядро  DOM, представл ен­
ное в  DOM Level  1, также было расширено поддержкой пространств имен XML. 
Для работы  с  новыми интерфейсами  в  DOM Level  2  были  представлены  новые 
модули: 
D  DOM Views  - интерфейсы для отслеживания различных представлений до-кумента (например, документ до и  после применения стилей CSS); 
D  DOM Events  - интерфейсы для событий и  обработки событий; 
D  DOM  Style -интерфейсы  для работы со  стилизацией элементов с помощью CSS; 
D  DOM  Traversal and Range -интерфейсы для обхода  элементов  дерева  документа 
и выполнения операций над ними. 
DOM Level  3  дополнила  DOM унифицированными  методами загруз ки и  сохра­
нения документов (содержатся в  новом модуле DOM Load and  Save) и  методами 
проверки  документа (DOM  Validation ). В ядре DOM была реализована поддержка 
всей спецификации XML 1. 0, включая  XML Inf oset, XPath и  XML Base. 
Изучая  DOM,  вы  можете  встретить  упом инания  DOM  Level  О.  Имейте  в  виду,  что 
стандарта  DOM  Level  О  не существует,  это  просто  стартовая точка  истории  DOM .  За 
DOM Level О принимают оригинальный DHTM L, поддержка которого была  реал изова на 
в  Iпterпet Explorer 4.0  и  Netscape  Navigator 4.0.










Другие DOM 
Кроме интерфейсов DOM Core и DOM HTML  отдельные  стандарты DOM опубли­
кованы для нескольких других языков. Так, следующие языки основаны на XML, 
и для  каждого  из них DOM добаляет уникальные методы и  интерфейсы: 
D  ScalaЫe Vector Graphics (SVG)  1. 0; 
D  Mathematical Markup Language (M ath ML) 1. 0; 
D  Synchronized Multimedia Integration Language (SMIL). 
Некоторые языки, такие  как XML User Interface  Language  (XUL)  от Mozilla,  со­
держат собственные  DОМ-реализации,  но только языки из приведенного списка 
являются стандартными рекомендациями WЗС.










Подде ржка  DOM  в  веб- браузерах 
Спустя некоторое время стандарт DOM начали реализовывать в браузерах. В Inter­
net Explorer начало было положено в версии 5, но серьезной поддержки DOM в IE 
не было  до  версии 5.5, в  которой была  реализована основная  часть  DOM Level  1. 
В  Internet  Explorer 6 и  7  новые функции DOM не  добавлялись, а в  версии 8 были 
исправлены некоторые ошибки. 
Netscape Navigator не поддерживал DOM  до  версии  Netscape 6 (Mozilla  0.6.0),  а  после 
Netscape 7 разработчики из Mozilla сосредоточились на  браузере Firefox. Firefox 3+ 
полностью поддерживает DOM Level  1, почти полностью Level 2 и частично Level 3 
(в  Mozilla поставлена цель создать браузер, полностью совместимый со стандартами, 
и усилия себя  оправдывают ). 
Поддержка  DOM  стала  одним из приоритетов для  производителей  браузеров, 
которые с каждым выпуском  делают  ее  более полной. В следующей табл ице пред­
ставлены сведения о поддержке DOM в  популярных браузерах.










Объе ктная  м одел ь  б рауэера 
В  Internet  Explorer 3  и  Netscape Navigator 3  была представлена объектная модель 
браузера (БОМ),  которая обеспечивает  доступ к окну браузера  и позволяет манипу­
лировать его элементами. Используя БОМ, можно взаимодействовать с браузером 
вне контекста отображаемой страницы. До недавних пор БОМ была единственной 
частью реализации JаvаSсriрt, не имеющей стандарта,  из-за чего при работе с  ней часто возни кал и проблемы. Формализация многих элементов БОМ в  HTMLS из­
менила ситуацию к лучшему,  прояснив многие неясные аспекты модели. 
БОМ регламентирует работу с окном и фреймами браузера, но  любое специфичное 
для  браузера jаvаSсriрt-расширение тоже обычно считается частью БОМ. Вот не­
которые такие расширения: 
О  функция отображения всплывающих окон в браузере; 
О  возможность перемещать, закрывать и  изменять размеры окна браузера; 
О  объект navigator, предоставляющий подробные сведения о браузере; 
О  объект location, предоставляющий подробные сведения о странице, загружен-ной в браузере; 
О  объект sc reen, предоставляющий подробные сведения о разрешении экрана; 
О  поддержка сооkiе- файлов; 
О  настраиваемые  объекты , включая XМ LHtt pReq uest,  а также  ActiveXObject  в Internet 
Explorer. 
Стандартов БОМ долго не было, поэтому в  каждом  браузере она реализована по­
своему . Де-факто некоторые стандарты существуют, например поддержка объектов 
win dow и na vigator, но каждый браузер определяет  для этих  и других объектов свои 
методы и свойства. Ожидается, что  благодаря HTMLS реализации БОМ будут  раз­
ви ваться более согласованно. Подробнее тема БОМ обсуждается в главе  8.










Ве рси и  Ja va Scri pt 
Как преемник  Netscape, фонд Mozilla является единственным  производителем брау­
зеров, который продолжает оригинальную нумерацию вepcий javascript. Когда был 
создан проект Mozilla  с открытым исходным кодом, новейшей вepcиeй javaScript  в 
браузерах была версия  1. 3  (как уже отмечалось, версия  1. 4  использовалась только 
на сервере ). По мере  добавления  в язык новых  возможностей, ключевых слов и эле­
ментов си нтаксиса номера  версий  увеличивались.  В  приведенной далее таблице 
показано, как изменялись номера вepcий javaScript в браузерах Netscape/Mozilla.

Предполагалось, что  в  Firefox 4  будет  использоваться JavaScript  2.0, и  каждое 
увеличение  номера версии указывает,  насколько близка реал изация J  ava Script 
к  спецификации 2.0. Однако эволюция JаvаSсriрt пошла по иному пути, нарушив 
первоначальный  план. В настоящее  время  у Mozilla нет планов выпуска конкретного 
продукта с]  avaScript 2.0. 
Важно отметить, что этой схеме нумера ции соответствуют только браузеры Netscape/ 
Mozi lla.  Нап ример,  в  Iпterпet  Explorer для нумера ции  версий JScript  применяется  со­
вершенно другая  схема.  Более того,  в  бол ьши нстве браузеров  поддержку JavaScript 
оценивают  по соответствию спецификации ECMAScri pt и  поддержке  DOM.










Рез ю ме 
Java Script  - это  язык сценариев,  разработан ный для  взаим одействия  с  веб­
страницами и состоящий из трех основных компонентов: 
D  язык ECMAScript, определенный в стандарте ЕСМА-262, обеспечивает  базовую 
]  avaScri  рt-функциональность; 
D  объектная модель документа предоставляет методы и интерфейсы для работы 
с  контентом веб-страницы; 
D  объектная  модель браузера  предоставляет  методы  и  интерфейсы для  взаимо-действия с  браузером . 
Пять основных веб- браузеров  (I nternet  Explorer,  Firefox,  Chrome,  Safari  и  Opera) 
различаются по поддержке компонентов JаvаSсriрt. Все производители браузеров 
в  целом адекватно реализовали спецификацию  ECMAScript  3  и  постепенно  рас­
ширяют поддержку ECMAScript 5,  тогда  как степень реализации DOM варьируется 
в широких пределах. Поддержка модели БОМ,  недавно формализованной в HTMLS, 
также зависит от браузера, хотя некоторые ее элементы универсальны.